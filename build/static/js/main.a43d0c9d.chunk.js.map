{"version":3,"sources":["components/shared/Nav/Nav.jsx","components/shared/Footer/Footer.jsx","components/shared/Layout/Layout.jsx","screens/Home/Home.jsx","screens/About/About.jsx","screens/Portfolio/Portfolio.jsx","screens/Resume/Resume.jsx","screens/Contact/Contact.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Nav","className","to","Footer","href","target","Layout","props","children","Home","src","width","height","About","memo","alt-img","Portfolio","Resume","Contact","id","onSubmit","handleSubmit","bind","method","htmlFor","type","aria-describedby","rows","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0VAsBeA,EAlBH,WAER,OACI,6BACI,yBAAKC,UAAU,OACX,kBAAC,IAAD,CAASA,UAAU,OAAOC,GAAG,KAA7B,aACA,yBAAKD,UAAU,SACZ,kBAAC,IAAD,CAASA,UAAU,OAAOC,GAAG,UAA7B,YACA,kBAAC,IAAD,CAASD,UAAU,OAAOC,GAAG,cAA7B,aACA,kBAAC,IAAD,CAASD,UAAU,OAAOC,GAAG,WAA7B,UACA,kBAAC,IAAD,CAASD,UAAU,OAAOC,GAAG,YAA7B,eCJJC,G,MAPA,kBACb,gCACE,uBAAGC,KAAK,wCAAwCC,OAAO,KAAvD,cACA,uBAAGD,KAAK,+BAA+BC,OAAO,KAA9C,eCSWC,EAVA,SAACC,GAAD,OACX,yBAAKN,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,mBACVM,EAAMC,UAEX,kBAAC,EAAD,QCKOC,EAXF,WACX,OACE,kBAAC,EAAD,KACE,yBAAKR,UAAU,QACf,yBAAKS,IAAI,kCAAmCC,MAAM,OAAQC,OAAO,SAChE,uBAAGX,UAAU,YAAb,wL,OCOQY,EAbDC,gBAAK,WACjB,OACE,kBAAC,EAAD,KACA,yBAAKb,UAAU,QACX,yBAAKA,UAAU,SAASS,IAAI,kCAAkCK,UAAQ,IAAtE,KACA,4BAAI,6CACJ,uBAAGd,UAAU,aAAb,mcACA,uBAAGA,UAAU,aAAb,kZCCOe,EAVG,WAChB,OACE,kBAAC,EAAD,KACE,yBAAKf,UAAU,WCQNgB,EAVA,WACb,OACE,kBAAC,EAAD,KACE,yBAAKhB,UAAU,W,SCqBNiB,EAxBCJ,gBAAK,WACnB,OACE,kBAAC,EAAD,KACA,6BACE,0BAAMK,GAAG,eAAeC,SAAU,EAAKC,aAAaC,KAAK,GAAOC,OAAO,QACzE,yBAAKtB,UAAU,cACX,2BAAOuB,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOxB,UAAU,kBAEjC,yBAAKA,UAAU,cACX,2BAAOuB,QAAQ,sBAAf,iBACA,2BAAOC,KAAK,QAAQxB,UAAU,eAAeyB,mBAAiB,eAElE,yBAAKzB,UAAU,cACX,2BAAOuB,QAAQ,WAAf,WACA,8BAAUvB,UAAU,eAAe0B,KAAK,OAE5C,4BAAQF,KAAK,SAASxB,UAAU,mBAAhC,gBCSW2B,EAhBH,WACV,OACE,yBAAK3B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,SAASC,UAAWlB,IACtC,kBAAC,IAAD,CAAOiB,KAAK,aAAaC,UAAWf,IACpC,kBAAC,IAAD,CAAOc,KAAK,UAAUC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,WAAWC,UAAWb,OCTtBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SD4H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a43d0c9d.chunk.js","sourcesContent":["import React from 'react'\nimport './Nav.css'\nimport { NavLink } from 'react-router-dom'\n\nconst Nav = () => {\n\n    return (\n        <nav>\n            <div className=\"nav\">\n                <NavLink className=\"logo\" to=\"/\">jeff bond</NavLink>\n                <div className=\"links\">\n                   <NavLink className=\"link\" to=\"/about\">About Me</NavLink>\n                   <NavLink className=\"link\" to=\"/portfolio\">Portfolio</NavLink>\n                   <NavLink className=\"link\" to=\"/resume\">Resume</NavLink>\n                   <NavLink className=\"link\" to=\"/contact\">Contact</NavLink>\n                </div>\n            </div>\n        </nav>\n    )\n\n}\n\nexport default Nav","import React from 'react'\nimport './Footer.css'\n\nconst Footer = () =>\n  <footer>\n    <a href=\"https://www.linkedin.com/in/jeffbond/\" target=\" \"> linkedIn </a>\n    <a href=\"https://github.com/Techumseh\" target=\" \"> GitHub </a>\n    \n    </footer>\n\nexport default Footer","import React from 'react'\nimport './Layout.css'\nimport Nav from '../Nav/Nav'\nimport Footer from '../Footer/Footer'\n\nconst Layout = (props) => (\n    <div className='layout'>\n        <Nav />\n        <div className=\"layout-children\">\n            {props.children}\n        </div>\n        <Footer />\n    </div>\n)\n\nexport default Layout","import React from 'react'\nimport './Home.css'\n// import ProductCards from '../../components/ProductCards/ProductCards'\nimport Layout from '../../components/shared/Layout/Layout'\n\nconst Home = () => {\n  return (\n    <Layout>\n      <div className=\"home\">\n      <img src=\"https://i.imgur.com/Br17b4U.jpg\"  width=\"100%\"  height=\"auto\"/>\n       <p className=\"centered\">I'm Jeff Bond and I am an Atlanta based Software Developer/IT Project Manager. I have 20 years of success in Tech including software engineering, project manangement, and DevOps</p>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Home","import React, { memo } from 'react';\nimport Layout from '../../components/shared/Layout/Layout'\n\n\nconst About = memo(() => {\n  return (\n    <Layout>\n    <div className=\"home\">\n        <img className=\"avatar\" src=\"https://i.imgur.com/KPHLLDY.jpg\" alt-img=\"\" > </img>\n        <h2><center>About Me</center></h2>\n        <p className=\"paragraph\">Experienced Executive with a demonstrated history of working in the Information Technology and Software Engineering industry. Skilled in Project Management, DevOps, Business Process, Budgeting, Analytical Skills, Requirements Analysis, Software Development and Government. Planned and managed multimillion-dollar projects aligning business goals with technology solutions to drive process improvements, competitive advantage and bottom-line gains.</p>\n        <p className=\"paragraph\">Graduate of General Assembly a Software Engineering Immerse program that included  480 hours of professional training over 12 weeks. Utilized a hands-on approach to design and build full-stack web applications with full CRUD functionality through Javascript, React, Express, SQL, SaSS, jQuery, Mongoose, Sublime/VsCode, Heroku, Node.jsPostgreSQL, MongoDB, HTML, CSS, Ruby, Rails and Sequelize.</p>\n    </div>\n  </Layout>\n  );\n});\n\nexport default About;","import React from 'react';\nimport Layout from '../../components/shared/Layout/Layout'\nconst Portfolio = () => {\n  return (\n    <Layout>\n      <div className=\"home\">\n        {/* <ProductCards /> */}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Portfolio;","import React from 'react';\nimport Layout from '../../components/shared/Layout/Layout'\n\nconst Resume = () => {\n  return (\n    <Layout>\n      <div className=\"home\">\n        {/* <ProductCards /> */}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Resume;","import React, { memo } from 'react';\nimport Layout from '../../components/shared/Layout/Layout'\n\nconst Contact = memo(() => {\n  return (\n    <Layout>\n    <div>\n      <form id=\"contact-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n    <div className=\"form-group\">\n        <label htmlFor=\"name\">Name</label>\n        <input type=\"text\" className=\"form-control\" />\n    </div>\n    <div className=\"form-group\">\n        <label htmlFor=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" className=\"form-control\" aria-describedby=\"emailHelp\" />\n    </div>\n    <div className=\"form-group\">\n        <label htmlFor=\"message\">Message</label>\n        <textarea className=\"form-control\" rows=\"5\"></textarea>\n    </div>\n    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n</form>\n      </div>\n    </Layout>\n  );\n});\n\nexport default Contact;","import React from 'react'\nimport './App.css'\nimport Home from './screens/Home/Home'\n// import Products from './screens/Products/Products'\n// import ProductCreate from './screens/ProductCreate/ProductCreate'\n// import ProductEdit from './screens/ProductEdit/ProductEdit'\n// import ProductDetail from './screens/ProductDetail/ProductDetail'\nimport { Route, Switch } from 'react-router-dom'\nimport About from './screens/About/About'\nimport Portfolio from './screens/Portfolio/Portfolio'\nimport Resume from './screens/Resume/Resume'\nimport Contact from './screens/Contact/Contact'\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/about\" component={About} />\n        <Route path=\"/portfolio\" component={Portfolio} />\n        <Route path=\"/resume\" component={Resume} />\n        <Route path=\"/contact\" component={Contact} />\n        {/* <Route exact path=\"/products/:id/edit\" component={ProductEdit} />\n        <Route exact path=\"/products/:id\" component={ProductDetail} /> */}\n      </Switch>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}